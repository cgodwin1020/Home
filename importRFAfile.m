function [subject_ID,tap_period_duration,RTT_all_5,RTT_all_4,RTT_all_3,RTT_all_2,RTT_all_1,tap_response_5,tap_response_4,tap_response_3,tap_response_2,tap_response_1,tap_count_all_cell,promptRESP_all,env_promptRESP_all,fm_promptRESP_all,timing_file_7beeps,promptRESP_RFA,env_promptRESP_RFA,fm_promptRESP_RFA,block] = importRFAfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [SUBJECT_ID,TAP_PERIOD_DURATION,RTT_ALL_5,RTT_ALL_4,RTT_ALL_3,RTT_ALL_2,RTT_ALL_1,TAP_RESPONSE_5,TAP_RESPONSE_4,TAP_RESPONSE_3,TAP_RESPONSE_2,TAP_RESPONSE_1,TAP_COUNT_ALL_CELL,PROMPTRESP_ALL,ENV_PROMPTRESP_ALL,FM_PROMPTRESP_ALL,TIMING_FILE_7BEEPS,PROMPTRESP_RFA,ENV_PROMPTRESP_RFA,FM_PROMPTRESP_RFA,BLOCK]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [SUBJECT_ID,TAP_PERIOD_DURATION,RTT_ALL_5,RTT_ALL_4,RTT_ALL_3,RTT_ALL_2,RTT_ALL_1,TAP_RESPONSE_5,TAP_RESPONSE_4,TAP_RESPONSE_3,TAP_RESPONSE_2,TAP_RESPONSE_1,TAP_COUNT_ALL_CELL,PROMPTRESP_ALL,ENV_PROMPTRESP_ALL,FM_PROMPTRESP_ALL,TIMING_FILE_7BEEPS,PROMPTRESP_RFA,ENV_PROMPTRESP_RFA,FM_PROMPTRESP_RFA,BLOCK]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [subject_ID,tap_period_duration,RTT_all_5,RTT_all_4,RTT_all_3,RTT_all_2,RTT_all_1,tap_response_5,tap_response_4,tap_response_3,tap_response_2,tap_response_1,tap_count_all_cell,promptRESP_all,env_promptRESP_all,fm_promptRESP_all,timing_file_7beeps,promptRESP_RFA,env_promptRESP_RFA,fm_promptRESP_RFA,block] = importfile('Sub3_MRI_task_data_RFA.csv',2, 76);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/10/30 12:20:59

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
subject_ID = cell2mat(raw(:, 1));
tap_period_duration = cell2mat(raw(:, 2));
RTT_all_5 = cell2mat(raw(:, 3));
RTT_all_4 = cell2mat(raw(:, 4));
RTT_all_3 = cell2mat(raw(:, 5));
RTT_all_2 = cell2mat(raw(:, 6));
RTT_all_1 = cell2mat(raw(:, 7));
tap_response_5 = cell2mat(raw(:, 8));
tap_response_4 = cell2mat(raw(:, 9));
tap_response_3 = cell2mat(raw(:, 10));
tap_response_2 = cell2mat(raw(:, 11));
tap_response_1 = cell2mat(raw(:, 12));
tap_count_all_cell = cell2mat(raw(:, 13));
promptRESP_all = cell2mat(raw(:, 14));
env_promptRESP_all = cell2mat(raw(:, 15));
fm_promptRESP_all = cell2mat(raw(:, 16));
timing_file_7beeps = cell2mat(raw(:, 17));
promptRESP_RFA = cell2mat(raw(:, 18));
env_promptRESP_RFA = cell2mat(raw(:, 19));
fm_promptRESP_RFA = cell2mat(raw(:, 20));
block = cell2mat(raw(:, 21));


